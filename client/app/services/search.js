/*Location Search Factory
 routes to Flickr API through server
 all GET requests will include @params has_geo=1 and extras=[geo, tags, date_taken, path_alias, url_m, url_s]
 */
angular.module('ScoutIOApp')
  .factory('Search', function ($http) {

    var tagResults;
    /*This is for a search done from the splash page or results page with tag input only
     Gets photos that match all tags supplied
     @param {string} tags  [user supplied comma deliniated tags] +tag_mode = all
     @return {array}       [array of photo objects]
     */
    var getByTagOnly = function (query) { 
      return $http({
        method: 'GET',
        url: 'api/search/tag/' + query
      })
        .then(function (data) {
          tagResults = data.data.photos.photo;
          // console.log(tagResults);
          return data;
        })
    };


    /*This is for a search done from the photo-page by lat/lon only
     Gets photos regardless of tag that were taken within a given or default 2mile radius)
     @param {array}  geo   [lat, lon, radius] + radius_units=mi
     @return {array}       [array of matching photo objects]
     */
    var getNearby = function (geo) {
      radius = radius || 2;
      return $http({
        method: 'GET',
        url: '/api/search/geo/' + geo
      })
        .then(function (data) {
          return data;
        })
    };

    /*This is a search done from the results page advanced search
     @param {object}

     [tags]            {string}              [user supplied comma deliniated tags or null] + tag_mode=all
     [lat]             {number}              [generated by googlemapsAPI based on user city, state or null]
     [lon]             {number}              [generated by googlemapsAPI based on user city, state or null]
     [radius]          {number}              [user supplied or default to 5]
     [min_taken_date]  {mySQL datetime}      [user supplied or null]
     [max_taken_date]  {mySQL datetime}      [user supplied or null]
     indoor:           {boolean}
     outdoor:          {boolean}

     @return {array} [array of matching photo objects]
     */
    var getAdvanced = function (searchCriteria) {
      console.log(searchCriteria);
      searchCriteria = JSON.stringify(searchCriteria);
      return $http({
        method: 'POST',
        url: '/api/search/advancedSearch',
        headers: {
          'Content-Type': 'application/json'
        },
        data: searchCriteria
      })
        .then(function (data) {
          return data;
        })
    };

    return {
      tagResults: function() { return tagResults; },
      getByTagOnly: getByTagOnly,
      getNearby: getNearby,
      getAdvanced: getAdvanced
    };

  });
